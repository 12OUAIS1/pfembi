{
  "version": 3,
  "sources": ["../../react-bootstrap/esm/Tooltip.js", "../../react-bootstrap/esm/helpers.js", "../../react-bootstrap/esm/getInitialPopperStyles.js"],
  "sourcesContent": ["\"use client\";\r\n\r\nimport classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\r\nimport { getOverlayDirection } from './helpers';\r\nimport getInitialPopperStyles from './getInitialPopperStyles';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst Tooltip = /*#__PURE__*/React.forwardRef(({\r\n  bsPrefix,\r\n  placement = 'right',\r\n  className,\r\n  style,\r\n  children,\r\n  arrowProps,\r\n  hasDoneInitialMeasure,\r\n  popper,\r\n  show,\r\n  ...props\r\n}, ref) => {\r\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'tooltip');\r\n  const isRTL = useIsRTL();\r\n  const [primaryPlacement] = (placement == null ? void 0 : placement.split('-')) || [];\r\n  const bsDirection = getOverlayDirection(primaryPlacement, isRTL);\r\n  let computedStyle = style;\r\n  if (show && !hasDoneInitialMeasure) {\r\n    computedStyle = {\r\n      ...style,\r\n      ...getInitialPopperStyles(popper == null ? void 0 : popper.strategy)\r\n    };\r\n  }\r\n  return /*#__PURE__*/_jsxs(\"div\", {\r\n    ref: ref,\r\n    style: computedStyle,\r\n    role: \"tooltip\",\r\n    \"x-placement\": primaryPlacement,\r\n    className: classNames(className, bsPrefix, `bs-tooltip-${bsDirection}`),\r\n    ...props,\r\n    children: [/*#__PURE__*/_jsx(\"div\", {\r\n      className: \"tooltip-arrow\",\r\n      ...arrowProps\r\n    }), /*#__PURE__*/_jsx(\"div\", {\r\n      className: `${bsPrefix}-inner`,\r\n      children: children\r\n    })]\r\n  });\r\n});\r\nTooltip.displayName = 'Tooltip';\r\nexport default Object.assign(Tooltip, {\r\n  // Default tooltip offset.\r\n  // https://github.com/twbs/bootstrap/blob/beca2a6c7f6bc88b6449339fc76edcda832c59e5/js/src/tooltip.js#L65\r\n  TOOLTIP_OFFSET: [0, 6]\r\n});", "import * as React from 'react';\r\nexport class BsPrefixComponent extends React.Component {}\r\n\r\n// Need to use this instead of typeof Component to get proper type checking.\r\n\r\nexport function getOverlayDirection(placement, isRTL) {\r\n  let bsDirection = placement;\r\n  if (placement === 'left') {\r\n    bsDirection = isRTL ? 'end' : 'start';\r\n  } else if (placement === 'right') {\r\n    bsDirection = isRTL ? 'start' : 'end';\r\n  }\r\n  return bsDirection;\r\n}", "export default function getInitialPopperStyles(position = 'absolute') {\r\n  return {\r\n    position,\r\n    top: '0',\r\n    left: '0',\r\n    opacity: '0',\r\n    pointerEvents: 'none'\r\n  };\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;AAEA,wBAAuB;AACvB,IAAAA,SAAuB;;;ACHvB,YAAuB;AAKhB,SAAS,oBAAoB,WAAW,OAAO;AACpD,MAAI,cAAc;AAClB,MAAI,cAAc,QAAQ;AACxB,kBAAc,QAAQ,QAAQ;AAAA,EAChC,WAAW,cAAc,SAAS;AAChC,kBAAc,QAAQ,UAAU;AAAA,EAClC;AACA,SAAO;AACT;;;ACbe,SAAR,uBAAwC,WAAW,YAAY;AACpE,SAAO;AAAA,IACL;AAAA,IACA,KAAK;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,IACT,eAAe;AAAA,EACjB;AACF;;;AFDA,yBAA4B;AAC5B,IAAAC,sBAA8B;AAC9B,IAAM,UAA6B,kBAAW,CAAC;AAAA,EAC7C;AAAA,EACA,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,GAAG,QAAQ;AACT,aAAW,mBAAmB,UAAU,SAAS;AACjD,QAAM,QAAQ,SAAS;AACvB,QAAM,CAAC,gBAAgB,KAAK,aAAa,OAAO,SAAS,UAAU,MAAM,GAAG,MAAM,CAAC;AACnF,QAAM,cAAc,oBAAoB,kBAAkB,KAAK;AAC/D,MAAI,gBAAgB;AACpB,MAAI,QAAQ,CAAC,uBAAuB;AAClC,oBAAgB;AAAA,MACd,GAAG;AAAA,MACH,GAAG,uBAAuB,UAAU,OAAO,SAAS,OAAO,QAAQ;AAAA,IACrE;AAAA,EACF;AACA,aAAoB,oBAAAC,MAAM,OAAO;AAAA,IAC/B;AAAA,IACA,OAAO;AAAA,IACP,MAAM;AAAA,IACN,eAAe;AAAA,IACf,eAAW,kBAAAC,SAAW,WAAW,UAAU,cAAc,WAAW,EAAE;AAAA,IACtE,GAAG;AAAA,IACH,UAAU,KAAc,mBAAAC,KAAK,OAAO;AAAA,MAClC,WAAW;AAAA,MACX,GAAG;AAAA,IACL,CAAC,OAAgB,mBAAAA,KAAK,OAAO;AAAA,MAC3B,WAAW,GAAG,QAAQ;AAAA,MACtB;AAAA,IACF,CAAC,CAAC;AAAA,EACJ,CAAC;AACH,CAAC;AACD,QAAQ,cAAc;AACtB,IAAO,kBAAQ,OAAO,OAAO,SAAS;AAAA;AAAA;AAAA,EAGpC,gBAAgB,CAAC,GAAG,CAAC;AACvB,CAAC;",
  "names": ["React", "import_jsx_runtime", "_jsxs", "classNames", "_jsx"]
}
